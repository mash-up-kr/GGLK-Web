/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * 깔깔룩위원회 API OpenAPI Document
 * OpenAPI spec version: 0.0.1
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  EvaluationItemResponseDto,
  EvaluationResponseDto,
  GetUserResponseDto,
  KakakoLoginRequestDto,
  OotdRoastingRequestDto,
  PictureControllerUploadPicture201,
  PictureControllerUploadPictureBody,
  TokenResponseDto,
} from "../model";

import { customInstance } from "../mutator/custom-instance";
import type { ErrorType } from "../mutator/custom-instance";

export const appControllerGetHello = (signal?: AbortSignal) => {
  return customInstance<void>({ url: "/", method: "GET", signal });
};

export const getAppControllerGetHelloQueryKey = () => {
  return ["/"] as const;
};

export const getAppControllerGetHelloQueryOptions = <
  TData = Awaited<ReturnType<typeof appControllerGetHello>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof appControllerGetHello>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAppControllerGetHelloQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof appControllerGetHello>>
  > = ({ signal }) => appControllerGetHello(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof appControllerGetHello>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AppControllerGetHelloQueryResult = NonNullable<
  Awaited<ReturnType<typeof appControllerGetHello>>
>;
export type AppControllerGetHelloQueryError = ErrorType<unknown>;

export function useAppControllerGetHello<
  TData = Awaited<ReturnType<typeof appControllerGetHello>>,
  TError = ErrorType<unknown>,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof appControllerGetHello>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof appControllerGetHello>>,
          TError,
          Awaited<ReturnType<typeof appControllerGetHello>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAppControllerGetHello<
  TData = Awaited<ReturnType<typeof appControllerGetHello>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof appControllerGetHello>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof appControllerGetHello>>,
          TError,
          Awaited<ReturnType<typeof appControllerGetHello>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAppControllerGetHello<
  TData = Awaited<ReturnType<typeof appControllerGetHello>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof appControllerGetHello>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useAppControllerGetHello<
  TData = Awaited<ReturnType<typeof appControllerGetHello>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof appControllerGetHello>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getAppControllerGetHelloQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Get user info. If user is guest, return only `is_Guest` true and other properties may be null
 * @summary Get user info
 */
export const userControllerGetUser = (signal?: AbortSignal) => {
  return customInstance<GetUserResponseDto>({
    url: "/user/me",
    method: "GET",
    signal,
  });
};

export const getUserControllerGetUserQueryKey = () => {
  return ["/user/me"] as const;
};

export const getUserControllerGetUserQueryOptions = <
  TData = Awaited<ReturnType<typeof userControllerGetUser>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof userControllerGetUser>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getUserControllerGetUserQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof userControllerGetUser>>
  > = ({ signal }) => userControllerGetUser(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof userControllerGetUser>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type UserControllerGetUserQueryResult = NonNullable<
  Awaited<ReturnType<typeof userControllerGetUser>>
>;
export type UserControllerGetUserQueryError = ErrorType<unknown>;

export function useUserControllerGetUser<
  TData = Awaited<ReturnType<typeof userControllerGetUser>>,
  TError = ErrorType<unknown>,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerGetUser>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof userControllerGetUser>>,
          TError,
          Awaited<ReturnType<typeof userControllerGetUser>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useUserControllerGetUser<
  TData = Awaited<ReturnType<typeof userControllerGetUser>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerGetUser>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof userControllerGetUser>>,
          TError,
          Awaited<ReturnType<typeof userControllerGetUser>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useUserControllerGetUser<
  TData = Awaited<ReturnType<typeof userControllerGetUser>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerGetUser>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get user info
 */

export function useUserControllerGetUser<
  TData = Awaited<ReturnType<typeof userControllerGetUser>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerGetUser>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getUserControllerGetUserQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Issue guest token
 * @summary Issue guest token
 */
export const authControllerGuestToken = (signal?: AbortSignal) => {
  return customInstance<TokenResponseDto>({
    url: "/auth/guest",
    method: "POST",
    signal,
  });
};

export const getAuthControllerGuestTokenMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerGuestToken>>,
    TError,
    void,
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authControllerGuestToken>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ["authControllerGuestToken"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authControllerGuestToken>>,
    void
  > = () => {
    return authControllerGuestToken();
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthControllerGuestTokenMutationResult = NonNullable<
  Awaited<ReturnType<typeof authControllerGuestToken>>
>;

export type AuthControllerGuestTokenMutationError = ErrorType<unknown>;

/**
 * @summary Issue guest token
 */
export const useAuthControllerGuestToken = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof authControllerGuestToken>>,
      TError,
      void,
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof authControllerGuestToken>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getAuthControllerGuestTokenMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * 
Kakao login handler입니다. 

Case 1. 만약 Guest User Token을 통해서(Authorization 토큰) request 되는 경우에는 Guest User를 실제 User로 마이그레이션을 합니다.

Case 2. 만약 순수 로그인이라면 Authorization 토큰 없이 요청을 하면 됩니다.
    
 * @summary Kakao login handler
 */
export const authControllerKakaoLoginHandler = (
  kakakoLoginRequestDto: KakakoLoginRequestDto,
  signal?: AbortSignal,
) => {
  return customInstance<void>({
    url: "/auth/kakao",
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: kakakoLoginRequestDto,
    signal,
  });
};

export const getAuthControllerKakaoLoginHandlerMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerKakaoLoginHandler>>,
    TError,
    { data: KakakoLoginRequestDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authControllerKakaoLoginHandler>>,
  TError,
  { data: KakakoLoginRequestDto },
  TContext
> => {
  const mutationKey = ["authControllerKakaoLoginHandler"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authControllerKakaoLoginHandler>>,
    { data: KakakoLoginRequestDto }
  > = (props) => {
    const { data } = props ?? {};

    return authControllerKakaoLoginHandler(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthControllerKakaoLoginHandlerMutationResult = NonNullable<
  Awaited<ReturnType<typeof authControllerKakaoLoginHandler>>
>;
export type AuthControllerKakaoLoginHandlerMutationBody = KakakoLoginRequestDto;
export type AuthControllerKakaoLoginHandlerMutationError = ErrorType<unknown>;

/**
 * @summary Kakao login handler
 */
export const useAuthControllerKakaoLoginHandler = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof authControllerKakaoLoginHandler>>,
      TError,
      { data: KakakoLoginRequestDto },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof authControllerKakaoLoginHandler>>,
  TError,
  { data: KakakoLoginRequestDto },
  TContext
> => {
  const mutationOptions =
    getAuthControllerKakaoLoginHandlerMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * 게스트 유저가 기회 사용했는지 확인
 * @summary Check if guest user use change
 */
export const evaluationControllerCheckIfGuestUserUseChance = (
  signal?: AbortSignal,
) => {
  return customInstance<boolean>({
    url: "/evaluation/guest-used",
    method: "GET",
    signal,
  });
};

export const getEvaluationControllerCheckIfGuestUserUseChanceQueryKey = () => {
  return ["/evaluation/guest-used"] as const;
};

export const getEvaluationControllerCheckIfGuestUserUseChanceQueryOptions = <
  TData = Awaited<
    ReturnType<typeof evaluationControllerCheckIfGuestUserUseChance>
  >,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof evaluationControllerCheckIfGuestUserUseChance>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getEvaluationControllerCheckIfGuestUserUseChanceQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof evaluationControllerCheckIfGuestUserUseChance>>
  > = ({ signal }) => evaluationControllerCheckIfGuestUserUseChance(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof evaluationControllerCheckIfGuestUserUseChance>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type EvaluationControllerCheckIfGuestUserUseChanceQueryResult =
  NonNullable<
    Awaited<ReturnType<typeof evaluationControllerCheckIfGuestUserUseChance>>
  >;
export type EvaluationControllerCheckIfGuestUserUseChanceQueryError =
  ErrorType<unknown>;

export function useEvaluationControllerCheckIfGuestUserUseChance<
  TData = Awaited<
    ReturnType<typeof evaluationControllerCheckIfGuestUserUseChance>
  >,
  TError = ErrorType<unknown>,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof evaluationControllerCheckIfGuestUserUseChance>
        >,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<
            ReturnType<typeof evaluationControllerCheckIfGuestUserUseChance>
          >,
          TError,
          Awaited<
            ReturnType<typeof evaluationControllerCheckIfGuestUserUseChance>
          >
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useEvaluationControllerCheckIfGuestUserUseChance<
  TData = Awaited<
    ReturnType<typeof evaluationControllerCheckIfGuestUserUseChance>
  >,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof evaluationControllerCheckIfGuestUserUseChance>
        >,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<
            ReturnType<typeof evaluationControllerCheckIfGuestUserUseChance>
          >,
          TError,
          Awaited<
            ReturnType<typeof evaluationControllerCheckIfGuestUserUseChance>
          >
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useEvaluationControllerCheckIfGuestUserUseChance<
  TData = Awaited<
    ReturnType<typeof evaluationControllerCheckIfGuestUserUseChance>
  >,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof evaluationControllerCheckIfGuestUserUseChance>
        >,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Check if guest user use change
 */

export function useEvaluationControllerCheckIfGuestUserUseChance<
  TData = Awaited<
    ReturnType<typeof evaluationControllerCheckIfGuestUserUseChance>
  >,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof evaluationControllerCheckIfGuestUserUseChance>
        >,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    getEvaluationControllerCheckIfGuestUserUseChanceQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Post 허고 이거 쓰쇼잉
 * @summary Get Ai Roasted data
 */
export const evaluationControllerGetEvaluationById = (
  id: number,
  signal?: AbortSignal,
) => {
  return customInstance<EvaluationItemResponseDto>({
    url: `/evaluation/${id}`,
    method: "GET",
    signal,
  });
};

export const getEvaluationControllerGetEvaluationByIdQueryKey = (
  id: number,
) => {
  return [`/evaluation/${id}`] as const;
};

export const getEvaluationControllerGetEvaluationByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof evaluationControllerGetEvaluationById>>,
  TError = ErrorType<void>,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof evaluationControllerGetEvaluationById>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getEvaluationControllerGetEvaluationByIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof evaluationControllerGetEvaluationById>>
  > = ({ signal }) => evaluationControllerGetEvaluationById(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof evaluationControllerGetEvaluationById>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type EvaluationControllerGetEvaluationByIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof evaluationControllerGetEvaluationById>>
>;
export type EvaluationControllerGetEvaluationByIdQueryError = ErrorType<void>;

export function useEvaluationControllerGetEvaluationById<
  TData = Awaited<ReturnType<typeof evaluationControllerGetEvaluationById>>,
  TError = ErrorType<void>,
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof evaluationControllerGetEvaluationById>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof evaluationControllerGetEvaluationById>>,
          TError,
          Awaited<ReturnType<typeof evaluationControllerGetEvaluationById>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useEvaluationControllerGetEvaluationById<
  TData = Awaited<ReturnType<typeof evaluationControllerGetEvaluationById>>,
  TError = ErrorType<void>,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof evaluationControllerGetEvaluationById>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof evaluationControllerGetEvaluationById>>,
          TError,
          Awaited<ReturnType<typeof evaluationControllerGetEvaluationById>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useEvaluationControllerGetEvaluationById<
  TData = Awaited<ReturnType<typeof evaluationControllerGetEvaluationById>>,
  TError = ErrorType<void>,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof evaluationControllerGetEvaluationById>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get Ai Roasted data
 */

export function useEvaluationControllerGetEvaluationById<
  TData = Awaited<ReturnType<typeof evaluationControllerGetEvaluationById>>,
  TError = ErrorType<void>,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof evaluationControllerGetEvaluationById>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getEvaluationControllerGetEvaluationByIdQueryOptions(
    id,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Image Upload이후 해당 Image의 ID로 요청을 진행해주세요
 * @summary OOTD Ai Roasting
 */
export const evaluationControllerDoOotdRoasting = (
  ootdRoastingRequestDto: OotdRoastingRequestDto,
  signal?: AbortSignal,
) => {
  return customInstance<EvaluationResponseDto>({
    url: "/evaluation/ootd",
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: ootdRoastingRequestDto,
    signal,
  });
};

export const getEvaluationControllerDoOotdRoastingMutationOptions = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof evaluationControllerDoOotdRoasting>>,
    TError,
    { data: OotdRoastingRequestDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof evaluationControllerDoOotdRoasting>>,
  TError,
  { data: OotdRoastingRequestDto },
  TContext
> => {
  const mutationKey = ["evaluationControllerDoOotdRoasting"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof evaluationControllerDoOotdRoasting>>,
    { data: OotdRoastingRequestDto }
  > = (props) => {
    const { data } = props ?? {};

    return evaluationControllerDoOotdRoasting(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type EvaluationControllerDoOotdRoastingMutationResult = NonNullable<
  Awaited<ReturnType<typeof evaluationControllerDoOotdRoasting>>
>;
export type EvaluationControllerDoOotdRoastingMutationBody =
  OotdRoastingRequestDto;
export type EvaluationControllerDoOotdRoastingMutationError = ErrorType<void>;

/**
 * @summary OOTD Ai Roasting
 */
export const useEvaluationControllerDoOotdRoasting = <
  TError = ErrorType<void>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof evaluationControllerDoOotdRoasting>>,
      TError,
      { data: OotdRoastingRequestDto },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof evaluationControllerDoOotdRoasting>>,
  TError,
  { data: OotdRoastingRequestDto },
  TContext
> => {
  const mutationOptions =
    getEvaluationControllerDoOotdRoastingMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * @summary 사진 업로드 및 저장
 */
export const pictureControllerUploadPicture = (
  pictureControllerUploadPictureBody: PictureControllerUploadPictureBody,
  signal?: AbortSignal,
) => {
  const formData = new FormData();
  if (pictureControllerUploadPictureBody.image !== undefined) {
    formData.append("image", pictureControllerUploadPictureBody.image);
  }

  return customInstance<PictureControllerUploadPicture201>({
    url: "/picture",
    method: "POST",
    headers: { "Content-Type": "multipart/form-data" },
    data: formData,
    signal,
  });
};

export const getPictureControllerUploadPictureMutationOptions = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof pictureControllerUploadPicture>>,
    TError,
    { data: PictureControllerUploadPictureBody },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof pictureControllerUploadPicture>>,
  TError,
  { data: PictureControllerUploadPictureBody },
  TContext
> => {
  const mutationKey = ["pictureControllerUploadPicture"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof pictureControllerUploadPicture>>,
    { data: PictureControllerUploadPictureBody }
  > = (props) => {
    const { data } = props ?? {};

    return pictureControllerUploadPicture(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PictureControllerUploadPictureMutationResult = NonNullable<
  Awaited<ReturnType<typeof pictureControllerUploadPicture>>
>;
export type PictureControllerUploadPictureMutationBody =
  PictureControllerUploadPictureBody;
export type PictureControllerUploadPictureMutationError = ErrorType<void>;

/**
 * @summary 사진 업로드 및 저장
 */
export const usePictureControllerUploadPicture = <
  TError = ErrorType<void>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof pictureControllerUploadPicture>>,
      TError,
      { data: PictureControllerUploadPictureBody },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof pictureControllerUploadPicture>>,
  TError,
  { data: PictureControllerUploadPictureBody },
  TContext
> => {
  const mutationOptions =
    getPictureControllerUploadPictureMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * @summary 사진 삭제
 */
export const pictureControllerDeletePicture = (id: number) => {
  return customInstance<void>({ url: `/picture/${id}`, method: "DELETE" });
};

export const getPictureControllerDeletePictureMutationOptions = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof pictureControllerDeletePicture>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof pictureControllerDeletePicture>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationKey = ["pictureControllerDeletePicture"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof pictureControllerDeletePicture>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return pictureControllerDeletePicture(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type PictureControllerDeletePictureMutationResult = NonNullable<
  Awaited<ReturnType<typeof pictureControllerDeletePicture>>
>;

export type PictureControllerDeletePictureMutationError = ErrorType<void>;

/**
 * @summary 사진 삭제
 */
export const usePictureControllerDeletePicture = <
  TError = ErrorType<void>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof pictureControllerDeletePicture>>,
      TError,
      { id: number },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof pictureControllerDeletePicture>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions =
    getPictureControllerDeletePictureMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
